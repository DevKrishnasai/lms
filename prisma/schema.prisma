generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      Role     @default(STUDENT)
  password  String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses  Course[]
  progress progress[]
  accesses Access[]
}

model Course {
  id          String  @id @default(uuid())
  title       String
  category    String?
  description String?
  thumbnail   String?
  price       Float?
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapters  Chapter[]
  accesses  Access[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Access {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  content     String?
  order       Int?
  isFree      Boolean @default(false)
  videoUrl    String?
  isPublished Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  attachments attachment[]
  progress    progress[]
  muxVideo    muxVideo?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model attachment {
  id   String @id @default(uuid())
  name String
  url  String
  type String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model progress {
  id     String @id @default(uuid())
  status Status @default(IN_PROGRESS)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model muxVideo {
  id         String  @id @default(uuid())
  chapterId  String  @unique
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  assertId   String
  videoUrl   String
  playbackId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  COMPLETED
  IN_PROGRESS
}
